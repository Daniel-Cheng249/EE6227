# Editor Name: Daniel Cheng
# Edit Time: 11:21 2022/2/4

import copy
import random
import math

# Population size equal to N
population_size = 16

parent = []

children = []

parent_fitness = []

children_fitness = []


def initial_individual():

    individual = []
    # N queens problem
    for i in range(16):
        a = random.randint(0, 15)
        individual.append(a)

    fit_score = update_fitness_score(individual)

    parent_fitness.append(fit_score)
    parent.append(individual)
    return


# fitness value calculation
def update_fitness_score(individual):
    value = 0
    for i in range(16):
        for j in range(i + 1, 16):
            if individual[i] != individual[j]:
                x = j - i
                y = abs(individual[i] - individual[j])
                if x != y:
                    value += 1
    return value


def initial_population():
    for i in range(population_size):
        initial_individual()
    return


# selection
def select():

    total_score = 0
    for fit in parent_fitness:
        total_score += fit

    # Roulette wheel selection
    num = random.randint(0, total_score)

    front_score = 0
    for i in range(population_size):
        front_score += parent_fitness[i]

        if front_score >= num:
            return i

# mutation
def mutation(change_individual):

    pos = random.randint(0, 15)

    change = random.randint(0, 15)
    change_individual[pos] = change
    return change_individual


# crossover
def hybridization():

    first = select()
    second = select()
    selected_parents = copy.deepcopy([parent[first], parent[second]])
    # change gene position from pos1 to pos2
    pos1 = random.randint(0, 14)
    pos2 = random.randint(0, 14)
    # ensure pos1 <= pos2
    if pos1 > pos2:
        pos1, pos2 = pos2, pos1
    # crossover
    tmp = selected_parents[0][pos1:pos2]
    selected_parents[0][pos1:pos2] = selected_parents[1][pos1:pos2]
    selected_parents[1][pos1:pos2] = tmp
    # mutation rate as 0.5
    may = random.random()
    if may > 0.5:
        selected_parents[0] = mutation(selected_parents[0])
    may = random.random()
    if may > 0.5:
        selected_parents[1] = mutation(selected_parents[1])

    first_fit = update_fitness_score(selected_parents[0])
    second_fit = update_fitness_score(selected_parents[1])


    children.append(selected_parents[0])
    children.append(selected_parents[1])
    children_fitness.append(first_fit)
    children_fitness.append(second_fit)
    return



initial_population()

count = 0
# not a number
find = float('nan')
while True:
    count += 1
    if count % 10000 == 0:
        print('%d' % count + ' times of iteration')

    for k in range(population_size // 2):
        hybridization()
    # if the fitness value of one individual is N(N-1), the target configuration is found
    for k in range(population_size):
        if children_fitness[k] == 120:

            find = k
            break
    if not math.isnan(find):
        break

    parent[0:population_size] = children[0:population_size]
    parent_fitness[0:population_size] = children_fitness[0:population_size]
    children = []
    children_fitness = []


res = children[find]
print(res)


res_queen = [[0 for i in range(16)] for j in range(16)]
for t in range(16):
    res_queen[res[t]][t] = 1

print("The Target Configuration is ï¼š")
for t in range(16):
    print(res_queen[t])

